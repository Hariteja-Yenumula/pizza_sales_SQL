-- 1.Determine the top 3 most ordered pizza types based on revenue for each pizza type category
select name,revenue 
from (
  select 
    category,
    name,
    revenue,
    rank() over(partition by category order 
    by revenue desc) as rn 
  from(
    select 
       pizza_types.name,
       pizza_types.category,
       sum(order_details.quantity*pizzas.price) as
revenue 
    from order_details 
    join pizzas on order_details.pizza_id=
pizzas.pizza_id 
    join pizza_types on pizza_types.pizza_type_id=
pizzas.pizza_type_id 
    group by pizza_types.name,
pizza_types.category
) as a
)as b 
where rn<=3;

--2.Analyse the cumulative revenue generated over time
select 
  order_date,
  sum(revenue) over( order by order_date) as 
cumulative_revenue 
from (
  select 
     orders.order_date as order_date,
     sum(order_details.quantity*pizzas.price) as
revenue 
  from order_details 
  join pizzas on order_details.pizza_id=
pizzas.pizza_id 
  join orders on orders.order_id=
order_details.order_id 
  group by orders.order_date
) as sales;

--3.Calculate the percentage contribution of each pizza type to total revenue
SELECT 
    pizza_types.category,
    ROUND(SUM(order_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(order_details.quantity * pizzas.price),
                                2) AS total_sales
                FROM
                    order_details
                        JOIN
                    pizzas ON pizzas.pizza_id = order_details.pizza_id) * 100,
            2) AS revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
        JOIN
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
GROUP BY pizza_types.category;

-- 4.Determine the top 3 most ordered pizza types based on revenue
SELECT 
    pizza_types.name,
    SUM(order_details.quantity * pizzas.price) AS revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
        JOIN
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;

-- 5. Group the orders by date and calculate the average number of pizzas ordered per day
SELECT 
    ROUND(AVG(quantity), 0)
FROM
    (SELECT 
        orders.order_date, SUM(order_details.quantity) AS quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS order_quantity;

-- 6.Join revelant tables to find the category wise distribution of pizzas
SELECT 
    COUNT(name), category
FROM
    pizza_types
GROUP BY category;

-- 7.Calculate how much customers spend on average per order
SELECT 
    COUNT(DISTINCT orders.order_id) AS total_orders,
    SUM(order_details.quantity * pizzas.price) AS total_revenue,
    ROUND(SUM(order_details.quantity * pizzas.price) / COUNT(DISTINCT orders.order_id),
            2) AS average_order_value
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
        JOIN
    orders ON orders.order_id = order_details.order_id;

-- 8.Which days of the week generate the most orders and revenue
SELECT 
    DAYNAME(orders.order_date) AS weekday,
    COUNT(DISTINCT orders.order_id) AS total_orders,
    SUM(order_details.quantity * pizzas.price) AS total_revenue
FROM
    orders
        JOIN
    order_details ON orders.order_id = order_details.order_id
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
GROUP BY DAYNAME(orders.order_date);

-- 9.How does our sales performance vary month to month 
SELECT 
    MONTHNAME(orders.order_date) AS month,
    COUNT(DISTINCT orders.order_id) AS total_orders,
    SUM(order_details.quantity * pizzas.price) AS total_revenue
FROM
    orders
        JOIN
    order_details ON orders.order_id = order_details.order_id
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
GROUP BY MONTHNAME(orders.order_date) , MONTH(orders.order_date)
ORDER BY MONTH(orders.order_date);

-- 10.Determine the distribution of orders by hour of the day
SELECT 
    HOUR(order_time) AS hour, COUNT(order_id) AS order_count
FROM
    orders
GROUP BY HOUR(order_time);

-- 11.Join necessary tables to find the total quamtity ofeach pizza category ordered
SELECT 
    COUNT(order_details.quantity), pizza_types.category
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY category;

-- 12.list the top 5  most ordered pizza types along with their quantities
SELECT 
    pizza_types.name, SUM(order_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5;

-- 13.Identify the most common pizza size ordered
SELECT 
    pizzas.size,
    COUNT(order_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC
LIMIT 1;

-- 14.Identify the highest priced pizza
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- 15.Calculate the total revenue generated from pizza sales
SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS total_revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id;

-- 16.Retrieve the total no of orders placed
select count(order_id) as total_orders from orders;
